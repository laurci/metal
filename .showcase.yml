size: big
description: |
  My team, Deadlock, and I built this project during the [Bucharest Hackathon 2023](https://thebucharesthackathon.com/), which [we won](https://www.linkedin.com/feed/update/urn:li:activity:7041055436652851201/). 
  
  Our goal was to allow users without Digital Hardware Design experience to easily create their own hardware, like accelerators, custom peripherals, high-performance signal processing, and custom actuator drivers. This project can speed up the iteration process from software to ASIC and provide cheaper access to educational products. 
  
  The user defines a function and it annotates it with the `#[metal::teleport]` directive. We used Rust's amazing meta-programming system to convert functions into hardware implementations using Scala code, which is later converted into Verilog using Spinal HDL. The hardware implementations are APB3 bus slaves and memory-mapped at known locations. We compiled the Rust code to the riscv32-imc target and linked it using a known memory map, then combined the generated hardware implementation with a standard RISCV 32 bits IMC softcore to generate the bitstream and load it into the FPGA, allowing the code to interact with hardware peripherals like normal memory.
tags:
  - embedded
  - low-level
  - FPGA
  - RISC-V